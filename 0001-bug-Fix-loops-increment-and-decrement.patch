From f9b59d0739c7d0d62f8b6c1ea42028da6d40e727 Mon Sep 17 00:00:00 2001
From: Rodrigo Guimaraes <rodrigo.guimaraes@pipefy.com>
Date: Mon, 31 May 2021 23:18:12 -0300
Subject: [PATCH] :bug: Fix loops increment and decrement

---
 bfjs.js | 274 ++++++++++++++++++++++++++++----------------------------
 1 file changed, 136 insertions(+), 138 deletions(-)

diff --git a/bfjs.js b/bfjs.js
index fb4742e..e549b43 100644
--- a/bfjs.js
+++ b/bfjs.js
@@ -1,16 +1,16 @@
 // Before some utilities this code needs.
 Array.prototype.move = (from, to) => {
-    this.splice(to, 0, this.splice(from, 1)[0]);
+  this.splice(to, 0, this.splice(from, 1)[0]);
 };
 Array.prototype.pushBefore = (elem) => {
-    this.push(elem);
-    this.move(this.length - 1, 0);
-}
+  this.push(elem);
+  this.move(this.length - 1, 0);
+};
 // Im sorry for this sleep abomination
 const sleep = (delay) => {
-    var start = new Date().getTime();
-    while (new Date().getTime() < start + delay);
-}
+  var start = new Date().getTime();
+  while (new Date().getTime() < start + delay);
+};
 
 // bfjs // Brainfuck Javascript Interpreter //
 
@@ -20,156 +20,154 @@ var memPointer = 0;
 var insideLoopCounter = 0;
 
 const executeInstruction = (inst) => {
-    switch (inst) {
-        case "<":
-            memPointer--;
-            if (memPointer < 0) { memPointer = mem.length - 1 }
-            break;
-        case ">":
-            memPointer++;
-            if (memPointer >= mem.length) { mem.push(0); }
-            break;
-        case "-":
-            mem[memPointer]--;
-            break;
-        case "+":
-            mem[memPointer]++;
-            break;
-        default:
-            console.log('Unknown Instruction: ' + inst);
-            break;
-    }
-}
+  switch (inst) {
+    case "<":
+      memPointer--;
+      if (memPointer < 0) {
+        memPointer = mem.length - 1;
+      }
+      break;
+    case ">":
+      memPointer++;
+      if (memPointer >= mem.length) {
+        mem.push(0);
+      }
+      break;
+    case "-":
+      mem[memPointer]--;
+      break;
+    case "+":
+      mem[memPointer]++;
+      break;
+    default:
+      console.log("Unknown Instruction: " + inst);
+      break;
+  }
+};
 
 const executeCode = (code) => {
+  let instructionPointer = 0;
+  mem = [0];
+  memPointer = 0;
+
+  while (instructionPointer < code.length) {
+    let instruction = code[instructionPointer];
+
+    switch (instruction) {
+      case "[":
+        // If cell value is not 0: ++ insideLoopCounter;
+        if (mem[memPointer] > 0) {
+          insideLoopCounter++;
+          console.log("inside loop, but wont jump it.");
+        } else {
+          // If cell value is 0: Jump the loop, making sure no bugs occur with inside loops;
+          let loopsToSkip = 1;
 
-    let instructionPointer = 0;
-    mem = [0];
-    memPointer = 0;
-
-    while (instructionPointer < code.length) {
-        let instruction = code[instructionPointer];
-
-        switch (instruction) {
-            case "[":
-                // If cell value is not 0: ++ insideLoopCounter;
-                if (mem[memPointer] > 0) {
-                    insideLoopCounter++;
-                    console.log("inside loop, but wont jump it.")
-                } else {
-                    // If cell value is 0: Jump the loop, making sure no bugs occur with inside loops;
-                    let loopsToSkip = 1;
-
-                    console.log("jumping loops!")
-
-
-                    while (loopsToSkip != 0 && code[instructionPointer] != "]") {
-
-                        //if (code[instructionPointer] == "[") { loopsToSkip++; }
-                        //if (code[instructionPointer] == "]") { loopsToSkip--; }
+          console.log("jumping loops!");
 
-                        // Commented old code that used ifs, in this case the switch
-                        // makes the jump 2x faster;
+          while (loopsToSkip != 0 && code[instructionPointer] != "]") {
+            //if (code[instructionPointer] == "[") { loopsToSkip++; }
+            //if (code[instructionPointer] == "]") { loopsToSkip--; }
 
-                        switch (code[instructionPointer]) {
-                            case "[":
-                                loopsToSkip++;
-                                break;
-                            case "]":
-                                loopsToSkip--;
-                                break;
-                        }
+            // Commented old code that used ifs, in this case the switch
+            // makes the jump 2x faster;
 
-                        instructionPointer++;
-                    }
-                }
-                break;
-            case "]":
-                // This code is literally the same code as jumping
-                // loops, except this is backwards;
-                if (mem[memPointer] > 0) {
-                    let loopsToSkip = 1;
-
-                    while (loopsToSkip != 0 && code[instructionPointer] != "[") {
-
-                        //if (code[instructionPointer] == "[") { loopsToSkip++; }
-                        //if (code[instructionPointer] == "]") { loopsToSkip--; }
-
-                        // Commented old code that used ifs, in this case the switch
-                        // makes the jump 2x faster;
-
-                        switch (code[instructionPointer]) {
-                            case "[":
-                                loopsToSkip++;
-                                break;
-                            case "]":
-                                loopsToSkip--;
-                                break;
-                        }
-
-                        instructionPointer--;
-                    }
-                }
+            switch (code[instructionPointer]) {
+              case "[":
+                loopsToSkip++;
                 break;
-            default:
-                executeInstruction(instruction);
+              case "]":
+                loopsToSkip--;
                 break;
+            }
+
+            instructionPointer++;
+          }
         }
+        break;
+      case "]":
+        // This code is literally the same code as jumping
+        // loops, except this is backwards;
+        if (mem[memPointer] > 0) {
+          let loopsToSkip = 1;
+
+          while (loopsToSkip != 0 && code[instructionPointer] != "[") {
+            //if (code[instructionPointer] == "[") { loopsToSkip++; }
+            //if (code[instructionPointer] == "]") { loopsToSkip--; }
+
+            // Commented old code that used ifs, in this case the switch
+            // makes the jump 2x faster;
+
+            switch (code[instructionPointer]) {
+              case "[":
+                loopsToSkip--;
+                break;
+              case "]":
+                loopsToSkip++;
+                break;
+            }
 
-        // This command makes the code go forward,
-        // loops can manipulate this value to jump
-        // around the code, but no other command
-        // should ever touch this value;
-        instructionPointer++;
-
-        // This command will render the current status
-        // at whick the code is, this is all the live
-        // feedback that is given to the user while the
-        // code is running, some commands can call this
-        // function to make the feedback more detailed;
-        renderBF();
+            instructionPointer--;
+          }
+        }
+        break;
+      default:
+        executeInstruction(instruction);
+        break;
     }
-}
-
-const renderBF = () => {
-    // TODO:
 
-    // This function shall update the values on screen according
-    // to the values current in the variables, it's soul purpose 
-    // is to give feedback about what is happening to the user;
+    // This command makes the code go forward,
+    // loops can manipulate this value to jump
+    // around the code, but no other command
+    // should ever touch this value;
+    instructionPointer++;
+
+    // This command will render the current status
+    // at whick the code is, this is all the live
+    // feedback that is given to the user while the
+    // code is running, some commands can call this
+    // function to make the feedback more detailed;
+    renderBF();
+  }
+};
 
-    var memoryDisplay = document.getElementsByClassName('memoryDisplay')[0];
-    memoryDisplay.innerHTML = ""; // Remove children
+const renderBF = () => {
+  // TODO:
 
-    let index = 0;
-    mem.forEach(memCell => {
-        let memoryCell = document.createElement('div');
+  // This function shall update the values on screen according
+  // to the values current in the variables, it's soul purpose
+  // is to give feedback about what is happening to the user;
 
-        // If memCell is the selected one, set class to "memoryCellSelected";
-        // else: set it to "memoryCell";
-        if (index == memPointer) {
-            memoryCell.className = "memoryCellSelected";
-        } else {
-            memoryCell.className = "memoryCell";
-        }
+  var memoryDisplay = document.getElementsByClassName("memoryDisplay")[0];
+  memoryDisplay.innerHTML = ""; // Remove children
 
-        // Put the cell value inside the DOM Object;
-        memoryCell.innerHTML = memCell;
+  let index = 0;
+  mem.forEach((memCell) => {
+    let memoryCell = document.createElement("div");
 
-        // Append to Memory Display
-        memoryDisplay.appendChild(memoryCell);
+    // If memCell is the selected one, set class to "memoryCellSelected";
+    // else: set it to "memoryCell";
+    if (index == memPointer) {
+      memoryCell.className = "memoryCellSelected";
+    } else {
+      memoryCell.className = "memoryCell";
+    }
 
-        // Keeping track of index
-        // in a foreach loop requires
-        // counting the index every
-        // time in the loop;
-        index++;
-    });
+    // Put the cell value inside the DOM Object;
+    memoryCell.innerHTML = memCell;
 
-    // Any waiting that needs to be done during the execution to 
-    // slow the code so the user can debug it must be done here;
-}
+    // Append to Memory Display
+    memoryDisplay.appendChild(memoryCell);
 
+    // Keeping track of index
+    // in a foreach loop requires
+    // counting the index every
+    // time in the loop;
+    index++;
+  });
 
+  // Any waiting that needs to be done during the execution to
+  // slow the code so the user can debug it must be done here;
+};
 
-renderBF();
\ No newline at end of file
+renderBF();
-- 
2.30.1 (Apple Git-130)

